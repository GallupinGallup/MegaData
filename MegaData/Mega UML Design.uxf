<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>80</x>
      <y>0</y>
      <w>230</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Created by Tyler Gallup
bg=Pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>360</x>
      <y>50</y>
      <w>350</w>
      <h>250</h>
    </coordinates>
    <panel_attributes>intNode
--
- nodeData : int
- nodePointer : IntNode *
--
+ getNodeData() : int
+ getNodePointer() : IntNode *
+ setNodeData(int value) : void
+ setNodePointer( IntNode * next) : void

+ IntNode() : constructor
+ IntNode(int value) : init
+ IntNode(int value, IntNode * nextNode) : init</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>800</x>
      <y>50</y>
      <w>500</w>
      <h>250</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- size : int
- front : IntNode *
--
+ IntNodeArray(int size) : constructor
+ setAtIndex(int index, int value) : void
+ getFromIndex(int index) ; int
+ getSize() : int</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>340</x>
      <y>0</y>
      <w>980</w>
      <h>340</h>
    </coordinates>
    <panel_attributes>EmptyPackage
--
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>350</x>
      <y>370</y>
      <w>490</w>
      <h>300</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
Data Members
- nodeData : Type
- nodePointer : Node&lt;Type *
--
Constructors

+ Node() : constructor
+ Node(Type value) : constructor

Methods

+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt; * 
+ setNodeData(Type data) : void
+ setNodePointer(Node&lt;Type&gt; * next) : void
+ setPreviousNode(BiDirectionalNode&lt;Type&gt; * previous) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1040</x>
      <y>340</y>
      <w>490</w>
      <h>250</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
Data Members

- fronSize : Node&lt;Type&gt; *
-size : int
--
Constructores
+ Array() : constructor
+ Array(intSixe : constructor

Advanced
+~array&lt;Type&gt;() ; destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied): copy constructor

Methods
+ geSize() : int
+ setAtIndex(int index, Type value) : void
+ getFromIndex(int index) : Type</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1760</x>
      <y>70</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>SimpleClass</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>700</x>
      <y>140</y>
      <w>120</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>100.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>830</x>
      <y>420</y>
      <w>230</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>210.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1040</x>
      <y>590</y>
      <w>580</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt; *
--
+ List&lt;Type&gt;() : constructor
+ List&lt;Type&gt;(const List&lt;Type&gt; &amp; source) : copy constructor
+ ~List&lt;Type&gt;() : deconstructor

+ addAtIndex(int index, Type value) : void
+ add(Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+getSize() const : int
+getFront() const : node&lt;Type&gt; *</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>830</x>
      <y>520</y>
      <w>230</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>210.0;300.0;130.0;300.0;130.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>330</y>
      <w>350</w>
      <h>250</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
- nodeData : Type
- previous : BiDirectionalNode() : constructor
- next : BiDirectionalNode&lt;Type&gt; *
--
+ BiDirectionalNode() : constructor
+ BiDirectionalNode(Type data) : constructor
+ BiDirectionalNode(Type data, BiDirectionalNode&lt;Type&gt; * previous,
							BiDirectionalNode&lt;Type&gt; * next) : constructor

							+getNodeData() : Type
							+setNodeData(TypeData) : void
							+ getPreviousNode() : BiDirectionalNode&lt;Type&gt; *
							</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>630</x>
      <y>1150</y>
      <w>180</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>CircularyLinkedList</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>110</x>
      <y>760</y>
      <w>720</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>DoublyLinkedList&lt;Type&gt;
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : &lt;Type&gt; *
- size : int
--
Node birtual methods
+ getSize()const : int
+ getFront()const : BiDirectionalNode&lt;Type&gt; *
+getEnd() const : BiDirectionalNode&lt;Type&gt; *

Virtual methods
+ add (Type value)
+ remove(int)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>160</x>
      <y>1120</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>Queue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>440</x>
      <y>1270</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>Stack</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>200</x>
      <y>970</y>
      <w>310</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>290.0;10.0;10.0;150.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>480</x>
      <y>970</y>
      <w>30</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;300.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>480</x>
      <y>970</y>
      <w>250</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;230.0;180.0</additional_attributes>
  </element>
</diagram>
